/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.clockinutil;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.util.HashMap;
import javax.swing.AbstractAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import systems.tech247.clockin.ZKOptions;
import systems.tech247.clockin.ZKSoapLib;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//systems.tech247.endeavorclockin//TAClockin//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TAClockinTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "systems.tech247.endeavorclockin.TAClockinTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TAClockinAction",
        preferredID = "TAClockinTopComponent"
)
@Messages({
    "CTL_TAClockinAction=TAClockin",
    "CTL_TAClockinTopComponent=Time & Attendance Records",
    "HINT_TAClockinTopComponent=This is a TAClockin window"
})
public final class TAClockinTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    ExplorerManager em = UtilZKClockin.attendanceEM;
    HashMap map = new HashMap();
    public TAClockinTopComponent() {
        initComponents();
        setName(Bundle.CTL_TAClockinTopComponent());
        setToolTipText(Bundle.HINT_TAClockinTopComponent());
        viewPanel.setLayout(new BorderLayout());
        
        OutlineView ov = new OutlineView("Registered Employees");
        ov.getOutline().setRootVisible(false);
        viewPanel.add(ov);
        ov.addPropertyColumn("clockinID", "Clockin ID");
        ov.addPropertyColumn("clockinTime", "Date/Time");
        ov.addPropertyColumn("clockinType","Checkin/Out");
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        
        //Get Options for the applications local options
        String comPort = 
        NbPreferences.forModule(ClockinMachinesPanel.class).get("ZKComPort","");
        String soapPort = 
        NbPreferences.forModule(ClockinMachinesPanel.class).get("ZKSoapPort", "");
        String ipAddress = 
        NbPreferences.forModule(ClockinMachinesPanel.class).get("ZKIPAddress","");
        String timeOut = 
        NbPreferences.forModule(ClockinMachinesPanel.class).get("ZKTimeOut", "");
        String udpPort = 
        NbPreferences.forModule(ClockinMachinesPanel.class).get("ZKUDPPort", "");
        
        
        
        
        
        map.put("ip", ipAddress);
        map.put("com_key", 0);
        ZKSoapLib stub = new ZKSoapLib(new ZKOptions(map));
        getActionMap().put("downloadAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                lblDeviceTime.setText("Device Time: "+stub.getDeviceTime());
                UtilZKClockin.loadClockin(stub.getAttendanceLogs());
                }catch(Exception ex){
                    StatusDisplayer.getDefault().setStatusText(ex.getLocalizedMessage());
                }
            }
        });
        
        getActionMap().put("uploadAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                lblDeviceTime.setText("Device Time: "+stub.getDeviceTime());
                StatusDisplayer.getDefault().setStatusText("Nothing To Upload, Download First");
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDeviceTime = new javax.swing.JLabel();
        viewPanel = new javax.swing.JPanel();
        jbAdjustTime = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblDeviceTime, org.openide.util.NbBundle.getMessage(TAClockinTopComponent.class, "TAClockinTopComponent.lblDeviceTime.text")); // NOI18N

        viewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jbAdjustTime, org.openide.util.NbBundle.getMessage(TAClockinTopComponent.class, "TAClockinTopComponent.jbAdjustTime.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDeviceTime, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAdjustTime)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDeviceTime)
                    .addComponent(jbAdjustTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAdjustTime;
    private javax.swing.JLabel lblDeviceTime;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
