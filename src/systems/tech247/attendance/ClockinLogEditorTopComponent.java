/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.attendance;

import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.persistence.Query;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;
import systems.tech247.dbaccess.DataAccess;
import static systems.tech247.dbaccess.DataAccess.entityManager;
import systems.tech247.hr.Employees;
import systems.tech247.util.NotifyUtil;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//systems.tech247.attendance//ClockinLogEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ClockinLogEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "systems.tech247.attendance.ClockinLogEditorTopComponent")

@Messages({
    "CTL_ClockinLogEditorAction=ClockinLogEditor",
    "CTL_ClockinLogEditorTopComponent=Insert Manual Clockin Log",
    "HINT_ClockinLogEditorTopComponent=This is a ClockinLogEditor window"
})
public final class ClockinLogEditorTopComponent extends TopComponent {
    
    
    InstanceContent ic = new InstanceContent();
    Employees emp;
    Date date;
    Calendar cal = Calendar.getInstance();
    
    HashMap<String,String> map = new HashMap<>();
    public ClockinLogEditorTopComponent() {
        this(null);
    }

    public ClockinLogEditorTopComponent(Employees emp) {
        initComponents();
        setName(Bundle.CTL_ClockinLogEditorTopComponent() +" -> "+ emp.getSurName()+" "+emp.getOtherNames());
        setToolTipText(Bundle.HINT_ClockinLogEditorTopComponent());
        
        this.emp = emp;
        
        jdcDate.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if(evt.getSource().equals(jdcDate) && evt.getPropertyName().equals("date")){
                date = jdcDate.getDate();
                cal.setTime(date);
                modify();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jdcDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxHour = new javax.swing.JComboBox<>();
        jComboBoxMinute = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboCheckinOptions = new javax.swing.JComboBox<>();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ClockinLogEditorTopComponent.class, "ClockinLogEditorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ClockinLogEditorTopComponent.class, "ClockinLogEditorTopComponent.jLabel2.text")); // NOI18N

        jComboBoxHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jComboBoxMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ClockinLogEditorTopComponent.class, "ClockinLogEditorTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ClockinLogEditorTopComponent.class, "ClockinLogEditorTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ClockinLogEditorTopComponent.class, "ClockinLogEditorTopComponent.jLabel5.text")); // NOI18N

        jComboCheckinOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboCheckinOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcDate, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboCheckinOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(207, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxHour;
    private javax.swing.JComboBox<String> jComboBoxMinute;
    private javax.swing.JComboBox<String> jComboCheckinOptions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private com.toedter.calendar.JDateChooser jdcDate;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        List listh = new ArrayList();
        for(int i = 0; i<24; i++){
            listh.add(i);
        }
        jComboBoxHour.setModel(new TimeComboBoxModel(listh));
        
        List listMinute = new ArrayList();
        for(int i = 0; i<60; i++){
            listMinute.add(i);
        }
        
        
        jComboBoxMinute.setModel(new TimeComboBoxModel(listMinute));
        jComboBoxHour.setSelectedIndex(8);
        jComboBoxMinute.setSelectedIndex(15);
        
        
        map.put("CHECKIN", "I");
        map.put("CHECKOUT", "O");
        jComboCheckinOptions.removeAllItems();
        map.keySet().forEach((s) -> {
            jComboCheckinOptions.addItem(s);
        });
        
        jComboCheckinOptions.setSelectedIndex(0);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private class TimeComboBoxModel extends AbstractListModel implements ComboBoxModel {
        private Integer selectedItem;
        private final List items;
        
        public TimeComboBoxModel(List items){
            this.items = items;
        }

        @Override
        public Object getElementAt(int index) {
            return items.get(index);
        }

        @Override
        public int getSize() {
            return items.size();
                    
        }

        @Override
        public Object getSelectedItem() {
            return selectedItem;
        }

        @Override
        public void setSelectedItem(Object anItem) {
            for(Object item : items ){
                if(anItem.equals(item)){
                    selectedItem = (Integer)item;
                    break;
                }
            }
        }
            
    }
    
    private class ClockinLogSavable extends AbstractSavable{
        
        String inout = map.get(jComboCheckinOptions.getSelectedItem().toString());
        int userID = DataAccess.getClockinID(emp).getUserid();
        int hour = (int)jComboBoxHour.getSelectedItem();
        int minute = (int)jComboBoxMinute.getSelectedItem();
        ClockinLogSavable(){
            register();
        }

        @Override
        protected String findDisplayName() {
                return "Clockin Log";
        }
        
        ClockinLogEditorTopComponent tc(){
            return ClockinLogEditorTopComponent.this;
        }

        @Override
        protected void handleSave() throws IOException {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
            cal.set(Calendar.HOUR, hour);
            cal.set(Calendar.MINUTE, minute);
            
            NotifyUtil.info("Compute Time", sdf.format(cal.getTime()), false);
            
            tc().ic.remove(this);
            unregister();
          
             
                
                        String insertSQL = "INSERT INTO [dbo].[CHECKINOUT]\n" +
"           ([USERID]\n" +
"           ,[CHECKTIME]\n" +
"           ,[CHECKTYPE]\n" +
"           ,[VERIFYCODE]\n" +
"           ,[SENSORID]\n" +
"           ,[Memoinfo]\n" +
"           ,[WorkCode]\n" +
"           ,[sn]\n" +
"           ,[UserExtFmt])\n" +
"     VALUES\n" +
"           (?,?,?,?,?,?,?,?,?)";
            Query query = entityManager.createNativeQuery(insertSQL);
            query.setParameter(1, userID);
            query.setParameter(2, cal.getTime());
            query.setParameter(3, inout);
            query.setParameter(4, 2);
            //query.setParameter(5, ui);
            //query.setParameter(6, ui);
            query.setParameter(7, 0);
            query.setParameter(8, "MANUAL");
            query.setParameter(9, 1);
            
            
            

            
            entityManager.getTransaction().begin();
            query.executeUpdate();
            entityManager.getTransaction().commit();
            
            
            
            
            this.tc().close();
            
        }

        @Override
        public boolean equals(Object o) {
            if(o instanceof ClockinLogSavable){
                ClockinLogSavable e = (ClockinLogSavable)o;
                return tc() == e.tc();
            }
            return false;        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }
        
    }
    
    public void modify(){
             
                if(getLookup().lookup(ClockinLogSavable.class)==null){
                            ic.add(new ClockinLogSavable());
                }
    }
    
}
